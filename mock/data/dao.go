// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gabriel-araujjo/condominio-auth/data (interfaces: UserDao,ClientDao)

// Package mock_data is a generated GoMock package.
package mock_data

import (
	domain "github.com/gabriel-araujjo/condominio-auth/domain"
	json_patcher "github.com/gabriel-araujjo/json-patcher"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserDao is a mock of UserDao interface
type MockUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoMockRecorder
}

// MockUserDaoMockRecorder is the mock recorder for MockUserDao
type MockUserDaoMockRecorder struct {
	mock *MockUserDao
}

// NewMockUserDao creates a new mock instance
func NewMockUserDao(ctrl *gomock.Controller) *MockUserDao {
	mock := &MockUserDao{ctrl: ctrl}
	mock.recorder = &MockUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDao) EXPECT() *MockUserDaoMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockUserDao) Auth(arg0, arg1 string) (int64, error) {
	ret := m.ctrl.Call(m, "Auth", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth
func (mr *MockUserDaoMockRecorder) Auth(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockUserDao)(nil).Auth), arg0, arg1)
}

// Create mocks base method
func (m *MockUserDao) Create(arg0 *domain.User) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserDaoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDao)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockUserDao) Delete(arg0 int64) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserDaoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDao)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockUserDao) Get(arg0 int64) (*domain.User, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserDaoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserDao)(nil).Get), arg0)
}

// Update mocks base method
func (m *MockUserDao) Update(arg0 int64, arg1 []json_patcher.Operation) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserDaoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDao)(nil).Update), arg0, arg1)
}

// MockClientDao is a mock of ClientDao interface
type MockClientDao struct {
	ctrl     *gomock.Controller
	recorder *MockClientDaoMockRecorder
}

// MockClientDaoMockRecorder is the mock recorder for MockClientDao
type MockClientDaoMockRecorder struct {
	mock *MockClientDao
}

// NewMockClientDao creates a new mock instance
func NewMockClientDao(ctrl *gomock.Controller) *MockClientDao {
	mock := &MockClientDao{ctrl: ctrl}
	mock.recorder = &MockClientDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientDao) EXPECT() *MockClientDaoMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockClientDao) Auth(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "Auth", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth
func (mr *MockClientDaoMockRecorder) Auth(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockClientDao)(nil).Auth), arg0, arg1)
}

// Create mocks base method
func (m *MockClientDao) Create(arg0 *domain.Client) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockClientDaoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientDao)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockClientDao) Delete(arg0 *domain.Client) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockClientDaoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientDao)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockClientDao) Get(arg0 string) (*domain.Client, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientDaoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientDao)(nil).Get), arg0)
}

// Update mocks base method
func (m *MockClientDao) Update(arg0 *domain.Client) error {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockClientDaoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientDao)(nil).Update), arg0)
}
